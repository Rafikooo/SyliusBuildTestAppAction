name: "Build Sylius Test Application"
description: "Builds a Sylius plugin's test application with the given PHP, Sylius, Symfony, MySQL versions."

inputs:
    # General
    build_type:
        required: true
        description: "A build type to be used"
        default: "app" # available options are "sylius" (to tests Sylius itself), "app" (to test Sylius-based application, e.g. Sylius-Standard), "plugin" (to test Sylius plugin)

    cache_key:
        required: false
        description: "A cache key to be used"
        default: "" # If empty no cache is used

    cache_restore_key:
        required: false
        description: "A cache restore key to be used"
        default: "" # If empty no cache is used

    e2e:
        required: false
        description: "Whether prepare the test application for e2e tests"
        default: "no"
    e2e_js:
        required: false
        description: "Whether prepare the test application for e2e tests with JS"
        default: "no"

    # Database
    database:
        required: true
        description: "A database engine to be used"
        default: "mysql" # available options are "mysql", "mariadb", "postgresql"
    database_version:
        required: true
        description: "A database version to be used"

    # PHP
    php_version:
        required: true
        description: "A PHP version to be used"
    php_extensions:
        required: true
        description: "PHP extensions to be installed"
        default: "intl, gd, opcache, mysql, pdo_mysql, pgsql, pdo_pgsql"
    php_tools:
        required: true
        description: "PHP tools to be installed"
        default: "symfony"
    php_coverage:
        required: false
        description: "PHP coverage"
        default: "none"

    # Symfony
    symfony_version:
        required: true
        description: "A Symfony version to be used"

    # Sylius
    sylius_version:
        required: false
        description: "A Sylius version to be used"
        default: "" # If empty no Sylius restriction is applied, also it allows to use this action while testing Sylius itself
    sylius_integration:
        required: false
        description: "A Sylius integration to be used"
        default: "" # If empty no Sylius integration is applied

    # Node.js (only when e2e_js is set to "yes")
    node_version:
        required: false
        description: "A Node.js version to be used"
        default: "16.x"

runs:
    using: "composite"

    steps:
        -
            name: Set application_dir environment variable
            shell: bash
            env:
                BUILD_TYPE: ${{ inputs.build_type }}
            run: |
                if [ "$BUILD_TYPE" = "plugin" ]; then
                    echo "application_dir=tests/Application" >> $GITHUB_ENV
                else
                    echo "application_dir=." >> $GITHUB_ENV
                fi

        #####################################################################
        # Set up a database                                                 #
        #####################################################################

        -   name: Shutdown default MySQL
            run: sudo service mysql stop
            shell: bash

        -   name: Setup MySQL
            if: inputs.database == 'mysql'
            uses: mirromutth/mysql-action@v1.1
            with:
                mysql version: "${{ inputs.database_version }}"
                mysql root password: "root"

        -   name: Setup MariaDB
            if: inputs.database == 'mariadb'
            uses: getong/mariadb-action@v1.1
            with:
                mariadb version: "${{ inputs.database_version }}"
                mysql root password: "root"

        -   name: Setup PostgreSQL
            if: inputs.database == 'postgresql'
            uses: harmon758/postgresql-action@v1
            with:
                postgresql version: "${{ inputs.database_version }}"
                postgresql password: "postgres"

        #####################################################################
        # Set up PHP & Symfony & Sylius                                     #
        #####################################################################

        -   name: Setup PHP
            uses: shivammathur/setup-php@v2
            with:
                php-version: "${{ inputs.php_version }}"
                extensions: "${{ inputs.php_extensions }}"
                tools: "${{ inputs.php_tools }}"
                coverage: "${{ inputs.php_coverage }}"

        -   name: Output PHP version for Symfony CLI
            run: php -v | head -n 1 | awk '{ print $2 }' > .php-version
            shell: bash

        -   name: Install certificates
            run: symfony server:ca:install
            shell: bash

        -   name: Restrict Symfony version
            run: |
                composer global config --no-plugins allow-plugins.symfony/flex true
                composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^1.17 || ^2.0"
                composer config extra.symfony.require "${{ inputs.symfony_version }}"
            shell: bash

        -   name: Restrict Sylius version
            if: inputs.sylius_version != '' && inputs.build_type != 'sylius'
            run: composer require "sylius/sylius:${{ inputs.sylius_version }}" --no-update --no-scripts --no-interaction
            shell: bash

        -   name: Get Composer cache directory
            id: composer-cache
            run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
            shell: bash

        -   name: "Restore dependencies"
            if: inputs.cache_key != ''
            uses: actions/cache@v3
            with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ inputs.cache_key }}
                restore-keys: |
                    ${{ inputs.cache_restore_key }}

        -   name: Install PHP dependencies
            run: composer install --no-interaction
            env:
                COMPOSER_ROOT_VERSION: dev-main
            shell: bash

        -   name: Install Sylius integration
            if: inputs.integration != '' && inputs.build_type != 'sylius'
            run: composer integration ${{ inputs.integration }}
            env:
                COMPOSER_ROOT_VERSION: dev-main
            shell: bash

        #####################################################################
        # Prepare for end-to-end tests                                      #
        #####################################################################

        -   uses: browser-actions/setup-chrome@latest
            if: inputs.e2e == 'yes' || inputs.e2e_js == 'yes'
            with:
                chrome-version: latest

        -   name: Run Chrome Headless
            if: inputs.e2e == 'yes' || inputs.e2e_js == 'yes'
            run: |
                export DISPLAY=:99
                chrome --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --allow-insecure-localhost --disable-translate --remote-debugging-port=9222 --disable-extensions --no-sandbox --enable-features=Metal --headless --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' http://127.0.0.1 > /dev/null 2>&1 &
            shell: bash
            working-directory: "${{ inputs.working-directory }}"

        -   name: Run webserver
            if: inputs.e2e == 'yes' || inputs.e2e_js == 'no'
            run: symfony server:start --port=8080 --dir=${{ env.application_dir }}/public --daemon
            shell: bash

        -   name: Configure Encore for non-JS end-to-end tests
            if: inputs.e2e == 'yes' && inputs.e2e_js == 'no'
            run: |
                mkdir -p public/build/admin public/build/shop 
                echo "{}" > public/build/admin/manifest.json
                echo "{}" > public/build/shop/manifest.json
            shell: bash
            working-directory: "${{ env.application_dir }}"

        #####################################################################
        # Set up Node.js                                                    #
        #####################################################################

        -   name: Setup Node
            if: inputs.e2e_js == 'yes' && inputs.node_version != ''
            uses: actions/setup-node@v3
            with:
                node-version: "${{ inputs.node_version }}"

        -   name: Install JS dependencies
            if: inputs.e2e_js == 'yes' && inputs.node_version != ''
            run: yarn install
            shell: bash
            working-directory: "${{ env.application_dir }}"

        -   name: Build JS assets
            if: inputs.e2e_js == 'yes' && inputs.node_version != ''
            run: yarn build
            shell: bash
            working-directory: "${{ env.application_dir }}"

        #####################################################################
        # Prepare the application                                           #
        #####################################################################

        -   name: Prepare application database (MariaDB/MySQL)
            if: inputs.database != 'postgresql'
            run: |
                bin/console doctrine:database:create --if-not-exists -vvv
                bin/console doctrine:migrations:migrate -n -vvv
            shell: bash
            working-directory: "${{ env.application_dir }}"

        -   name: Prepare application database (PostgreSQL)
            if: inputs.database == 'postgresql'
            run: |
                bin/console doctrine:database:create --if-not-exists -vvv
                bin/console doctrine:migrations:migrate -n -vvv
                bin/console doctrine:migrations:sync-metadata-storage
            shell: bash
            working-directory: "${{ env.application_dir }}"

        -   name: Install assets
            run: bin/console assets:install public -vvv
            shell: bash
            working-directory: "${{ env.application_dir }}"

        -   name: Warm up cache
            run: bin/console cache:warmup -vvv
            shell: bash
            working-directory: "${{ env.application_dir }}"

        -   name: Load fixtures
            run: bin/console sylius:fixtures:load -n
            shell: bash
            working-directory: "${{ env.application_dir }}"

branding:
    icon: activity
    color: green
